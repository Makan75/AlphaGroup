<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Alpha Housing</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
    <link href="style.css" rel="stylesheet" type="text/css" />
    <link href="layout.css" rel="stylesheet" type="text/css" />
    <style type="text/css">
      .search_img {behavior:url(iepngfix.htc);}
    </style>
  </head>
  
  <body id="page5">
    <div id="main">
      <div id="border">
	<!-- header -->
	<div id="header">
	  <div><!--Valid flash version 8.0-->
	    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		    codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,24"
		    width="766" height="474">
	      <param name="movie" value="flash/header_v8.swf?button=5" /> 
	      <param name="quality" value="high" />
	      <param name="menu" value="false" />
	      <!--[if !IE]> <-->
	      <object data="flash/header_v8.swf?button=5"
		      width="766" height="474" type="application/x-shockwave-flash">
		<param name="quality" value="high" />
		<param name="menu" value="false" />
		<param name="pluginurl" value="http://www.macromedia.com/go/getflashplayer" />
		FAIL (the browser should render some flash content, not this).
	      </object>
	      <!--> <![endif]-->
	  </object></div>
	</div>
		<!-- content -->
	<div id="content">
	  <div class="row_1">
	    <div class="container">
	      <div class="col_1">
		<div class="indent">
		  <div class="title_block"><p><font size="4">SEARCH IN GOTHENBERG</font></p></div>
		  
		  <div class="container">
		    <form id="form2" method="POST" action="post_park.yaws">
		                        
                      
                    &nbsp;&nbsp;&nbsp &nbsp;&nbsp;&nbsp &nbsp;&nbsp;&nbsp
		    &nbsp;&nbsp;&nbsp &nbsp;&nbsp;&nbsp &nbsp;&nbsp;&nbsp
		    <br></br>
		     <div class="form1">
                      <label>
                        Price:</label><select name="price">
                        <option value=0>Any</option>
                        <option value=1>0 - 300 </option>
                        <option value=2>301 - 500 Kr</option>
                        <option value=3>501 - 700 Kr</option>
                        <option value=4>701 - Above</option>
                        
                    </select></div> &nbsp;&nbsp;&nbsp &nbsp;&nbsp;&nbsp &nbsp;&nbsp;&nbsp
		   
		     <div>
                      &nbsp;&nbsp;&nbsp;
                      <input class="input_2" type="image" src="images/form_but.gif" /></div>
		    </form>
		     <div class="clear"></div>
		  </div>
		</div>
	      </div>
	      
	      <div class="col_2">
		<div class="block">
		  <div class="top_tall">
		    <div class="right_tall">
		      <div class="bottom_tall">
			<div class="left_tall">
			  <div class="left_top_corner">
			    <div class="right_top_corner">
			      <div class="right_bottom_corner">
				<div class="left_bottom_corner">
				  <div class="inner">
				    <br />
				    <div class="inner1">
				      <p><font size="4">INFORMATION</font></p>
                                      <ol class="list1">
                    
                                        <li class="bgd_enother">Choose the Price.</li><br />
                                        <br />
                                        
                                        
                                      </ol>
				    </div>
				  </div>
				</div>
			      </div>
			    </div>
			  </div>
			</div>
		      </div>
		    </div>
		  </div>
		</div>
	      </div>
	      <div class="clear"></div>
	    </div>
	  </div>
	  <div class="row_2">
	    <!--- Table result --->
	  </div>
	</div>
	<erl>

-include("../../include/alpha_records.hrl").

		    		    
out(A)->
    List = yaws_api:parse_post(A),
 
    Price = proplists:get_value("price",List,"undefined"),   
    ParkList = rectify(parking:main()),
    
    case catch list_to_integer(Price) of
	{'EXIT',_}->
	    ok;
	
	%% 0-300
	1 ->
	    ObjList = [X||X<-ParkList,list_to_integer(X#parking.maxprice)<301,list_to_integer(X#parking.maxprice)>0,list_to_integer(X#parking.minprice)>0,list_to_integer(X#parking.minprice)<301],
	    generate_table(ObjList);
	%% 301-500
	2 ->
	    ObjList = [X||X<-ParkList,list_to_integer(X#parking.maxprice)<500,list_to_integer(X#parking.maxprice)>301,list_to_integer(X#parking.minprice)>301,list_to_integer(X#parking.minprice)<501],
	    generate_table(ObjList);
	
	%% 501-700
	3 ->
	    ObjList = [X||X<-ParkList,list_to_integer(X#parking.maxprice)<701,list_to_integer(X#parking.maxprice)>501,list_to_integer(X#parking.minprice)>501,list_to_integer(X#parking.minprice)<701],
	    generate_table(ObjList);

	%% 701-Above
	4 ->
	    ObjList = [X||X<-ParkList,list_to_integer(X#parking.maxprice)>701,list_to_integer(X#parking.minprice)>701],
	    generate_table(ObjList);
	%%
	0 ->
	    ObjList = [X||X<-ParkList],
	    generate_table(ObjList)


    end.

rectify(List)->
    List1 = [X||X<-List,case catch list_to_integer(X#parking.maxprice) of {'EXIT',_} -> true ; _ -> false end],
    List2 = [X||X<-List,case catch list_to_integer(X#parking.minprice) of {'EXIT',_} -> true ; _ -> false end],
    DefectList = lists:append(List1,List2),
    rectify(DefectList,List).
    
rectify([],List)->
    List;
rectify([H|T],List)->
    rectify(T,lists:delete(H,List)).

% process([],Price,Acc)->
%     Acc;
% process([H|T],Price,Acc) ->
%     TH = {H#}
%     process(T,[TH|Acc]).


generate_table(ObjList)->
    case length(ObjList)<11 of
	true ->
	    TRS =  generate_trs(ObjList,[]),
	    {ehtml, {table,[{border,"2"},
			    {width,"100%"},
			    {cellpadding,"10"},
			    {cellspacing,"5"}],
		     [ 
		       {tr,[],
			[{td,[],{b,[],"Address"}},
			 {td,[],{b,[],"Room"}},
			 {td,[],{b,[],"Area"}},
			 {td,[],{b,[],"Price"}},
			 {td,[],{b,[],"Hyra"}},
			 {td,[],{b,[],"City"}} ]}|TRS]}};
	
	false ->
	    
	    {List,_} = lists:split(10,ObjList),
	    TRS = generate_trs(List,[]),
	    {ehtml, {table,[{border,"2"},
			    {width,"100%"},
			    {cellpadding,"10"},
			    {cellspacing,"5"}],
		     [ 
		       {tr,[],
			[{td,[],{b,[],"Adress"}},
			 {td,[],{b,[],"Antal"}},
			 {td,[],{b,[],"Ko"}},
			 {td,[],{b,[],"Ledig"}},
			 {td,[],{b,[],"MinPrice"}},
			 {td,[],{b,[],"MaxPrice"}},
			 {td,[],{b,[],"Lat"}},
			 {td,[],{b,[],"Lon"}} ]}|TRS]}}		    
    end.	  	


generate_trs([],AccList)->
    AccList;

generate_trs([Park|T],AccList)->
    Adress = binary:bin_to_list(unicode:characters_to_binary(Park#parking.address,latin1,utf8)),
    Antal = Park#parking.antal,
    Ko = Park#parking.ko,
    Ledig = Park#parking.ledig,
    MinPrice = Park#parking.minprice,
    MaxPrice = Park#parking.maxprice,
    Lat = Park#parking.lat,
    Lon = Park#parking.lon,
    generate_trs(T,
		 [{tr,[],
			[{td,[],{b,[],Adress}},
			 {td,[],{b,[],Antal}},
			 {td,[],{b,[],Ko}},
			 {td,[],{b,[],Ledig}},
			 {td,[],{b,[],MinPrice}},
			 {td,[],{b,[],MaxPrice}},
			 {td,[],{b,[],Lat}},
			 {td,[],{b,[],Lon}} ]}| AccList]).




		    </erl>	
	<!-- footer -->
	<div id="footer">
	  <p>Alpha Housing &copy; 2012</p>
	</div>
      </div>
    </div>
  </body>
</html>